services:
  debridav:
    image: ghcr.io/skjaere/debridav:latest
    container_name: debridav
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
      - DEBRIDAV_ROOTPATH=${DEBRIDAV_ROOT_PATH}
      - DEBRIDAV_DOWNLOADPATH=${DEBRIDAV_DOWNLOAD_PATH}
      - DEBRIDAV_MOUNTPATH=${DEBRIDAV_MOUNT_PATH_CONTAINERS}
      - DEBRIDAV_DEBRIDCLIENTS=${DEBRIDAV_DEBRID_CLIENTS}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${DEBRIDAV_DB_HOST}:${DEBRIDAV_DB_PORT}/${DEBRIDAV_DB_DATABASE_NAME}?user=${DEBRIDAV_DB_USERNAME}&password=${DEBRIDAV_DB_PASSWORD}
      - PREMIUMIZE_APIKEY=${PREMIUMIZE_API_KEY}
      - REALDEBRID_APIKEY=${REAL_DEBRID_API_KEY}
      - SONARR_INTEGRATIONENABLED=${SONARR_INTEGRATION_ENABLED}
      - SONARR_HOST=${SONARR_HOST}
      - SONARR_PORT=${SONARR_PORT}
      - SONARR_APIKEY=${SONARR_API_KEY}
      - RADARR_INTEGRATIONENABLED=${RADARR_INTEGRATION_ENABLED}
      - RADARR_HOST=${RADARR_HOST}
      - RADARR_PORT=${RADARR_PORT}
      - RADARR_APIKEY=${RADARR_API_KEY}
      - EASYNEWS_USERNAME=${EASYNEWS_USERNAME}
      - EASYNEWS_PASSWORD=${EASYNEWS_PASSWORD}
      - TORBOX_APIKEY=${TORBOX_API_KEY}
    ports:
      - ${DEBRIDAV_PORT}:8080
      - "8000:8000"
    networks:
      - debridav-network
    volumes:
      - ${DEBRIDAV_ROOT_HOST_FS}:${DEBRIDAV_ROOT_PATH}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health/readiness" ]
      interval: 2s
      start_period: 2s
      retries: 1000
    labels:
      filebeat_enabled:
    depends_on:
      postgres-debridav:
        condition: service_healthy
  rclone:
    container_name: rclone
    image: rclone/rclone:latest
    restart: unless-stopped
    environment:
      TZ: Europe/Berlin
      PUID: 1000
      PGID: 1000
    volumes:
      - ${DEBRIDAV_MOUNT_PATH_HOST_FS}:${DEBRIDAV_MOUNT_PATH_CONTAINERS}:rshared
      - ./rclone.conf:/config/rclone/rclone.conf
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    devices:
      - /dev/fuse:/dev/fuse:rwm
    command: "mount debridav: $DEBRIDAV_MOUNT_PATH_CONTAINERS 
              --allow-other 
              --allow-non-empty 
              --dir-cache-time 0s 
              --vfs-cache-mode off 
              --vfs-cache-max-size 10G 
              --rc-enable-metrics
              --metrics-addr :9002
              "
    ports:
      - "5572:5572"
      - "9002:9002"
    depends_on:
      debridav:
        condition: service_healthy
    networks:
      - debridav-network
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr-debridav
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - ./sonarr-config:/config
      - ${DEBRIDAV_MOUNT_PATH_HOST_FS}:${DEBRIDAV_MOUNT_PATH_CONTAINERS}:rshared
    ports:
      - 8989:8989
    depends_on:
      - rclone
    restart: unless-stopped
    labels:
      filebeat_enabled:
    networks:
      - debridav-network
  radarr-debridav:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr-debridav
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - ./radarr-config:/config
      - ${DEBRIDAV_MOUNT_PATH_HOST_FS}:${DEBRIDAV_MOUNT_PATH_CONTAINERS}:rshared
    ports:
      - "7878:7878"
    depends_on:
      - rclone
    restart: unless-stopped
    networks:
      - debridav-network
  jellyfin-debridav:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin-debridav
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    #- JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    ports:
      - "8096:8096"
      - "8920:8920" #optional
      - "7359:7359/udp" #optional
      #- 1900:1900/udp #optional
    restart: unless-stopped
    depends_on:
      - rclone
    volumes:
      - ./jellyfin-config:/config
      - ${DEBRIDAV_MOUNT_PATH_HOST_FS}:${DEBRIDAV_MOUNT_PATH_CONTAINERS}:rshared
    networks:
      - debridav-network
  prowlarr-debridav:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr-debridav
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    volumes:
      - ./prowlarr-config:/config
    ports:
      - "9696:9696"
    restart: unless-stopped
    depends_on:
      - rclone
    networks:
      - debridav-network
  postgres-debridav:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=debridav
      - POSTGRES_USER=debridav
      - PGDATA=/var/lib/postgresql/data/pgdata
      - PGUSER=debridav
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "debridav" ]
      interval: 1s
      timeout: 60s
      retries: 10
      start_period: 2s
    networks:
      - debridav-network
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - debridav-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/defaults.ini:/etc/grafana/defaults.ini
    networks:
      - debridav-network
  postgres-metrics-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_URI=${DEBRIDAV_DB_HOST}:${DEBRIDAV_DB_PORT}/${DEBRIDAV_DB_DATABASE_NAME}?sslmode=disable
      - DATA_SOURCE_USER=${DEBRIDAV_DB_USERNAME}
      - DATA_SOURCE_PASS=${DEBRIDAV_DB_PASSWORD}
      - PG_EXPORTER_EXTEND_QUERY_PATH=/custom-queries/queries.yaml
    volumes:
      - ./pg-exporter/custom-queries:/custom-queries
    ports:
      - "9187:9187"
    networks:
      - debridav-network
      #elasticsearch:
      #  image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
      #  container_name: elasticsearch
      #environment:
      #- cluster.name=debridav
      #      - discovery.type=single-node
      #- xpack.security.enabled=false
      ####- network.host=0.0.0.0
      #- transport.host=0.0.0.0
      #- discovery.seed_hosts=[]
      #- ES_JAVA_OPTS=-Xms2048m -Xmx2048m
      #mem_limit: 4096m
      #ports:
      #- "9200:9200"
      ##networks:
      #- debridav-network
      #filebeat:
      #
      #    user: root
      #    depends_on:
      #      - logstash
      #image: docker.elastic.co/beats/filebeat:9.0.0
      #volumes:
      #- ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      #- /var/lib/docker/containers:/var/lib/docker/containers
      #- /var/run/docker.sock:/var/run/docker.sock
      #- /var/log/containers/:/var/log/containers/
      #networks:
      #- debridav-network
      #logstash:
      ##container_name: logstash
      #depends_on:
      #- elasticsearch
      #image: docker.elastic.co/logstash/logstash:9.0.0
      #ports: [ "9600:9600" ]
      #volumes:
      #- ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      #networks:
      #- debridav-network
      #kibana:
      #container_name: kibana
      #image: docker.elastic.co/kibana/kibana:9.0.0
      #ports: [ "5601:5601" ]
      #environment:
      #- xpack.security.enabled=false
      #networks:
      #- debridav-network
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8082:8080
networks:
  debridav-network:

